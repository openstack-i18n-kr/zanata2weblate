#!/usr/bin/env python3

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import os
import sys
from collections import OrderedDict
import json
import logging
import random

import requests
from WeblateUtils import IniConfig
from WeblateUtils import WeblateRestService
import yaml

WEBLATE_URI = "https://openstack.weblate.cloud/api/%s"
LOG = logging.getLogger("weblate_users")
YAML_COMMENT = """\
# This file is generated by tools/weblate/weblate_users.py.
"""


class WeblateUtility(object):
    """Utilities to collect Weblate language contributors"""

    user_agents = [
        "Mozilla/5.0 (X11; Ubuntu; Linux x86_64) Gecko/20100101 Firefox/32.0",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_6) AppleWebKit/537.78.2",
        "Mozilla/5.0 (Windows NT 6.3; WOW64) Gecko/20100101 Firefox/32.0",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X) Chrome/37.0.2062.120",
        "Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko",
    ]

    def __init__(self, wconfig):
        accept = 'application/json'
        content_type = 'application/json'
        self.rest_service = WeblateRestService(wconfig, accept=accept,
                                               content_type=content_type)

    def read_uri(self, uri, headers):
        try:
            headers["User-Agent"] = random.choice(WeblateUtility.user_agents)
            # req = requests.get(uri, headers=headers)
            req = self.rest_service.query(uri)
            return req.text
        except Exception as e:
            LOG.error(
                'Error "%(error)s" while reading uri %(uri)s', {"error": e, "uri": uri}
            )
            raise

    def read_json_from_uri(self, uri):
        data = self.read_uri(uri, {"Accept": "application/json"})
        try:
            return json.loads(data)
        except Exception as e:
            LOG.error(
                'Error "%(error)s" parsing json from uri %(uri)s',
                {"error": e, "uri": uri},
            )
            raise

    def get_users(self):
        uri = WEBLATE_URI % "users/"
        LOG.debug(
            "Reading the list of all users from %s" % uri
        )
        users_data = self.read_json_from_uri(uri)
        return users_data

    # def get_groups(self):
    #     uri = WEBLATE_URI % "groups/"
    #     languages = {}
    #     while True:
    #         LOG.debug("Reading the list of locales from %s" % uri)
    #         groups_data = self.read_json_from_uri(uri)
    #         for group in groups_data[]

    def get_locales(self):
        uri = WEBLATE_URI % "languages/"
        languages = {}
        while True:
            LOG.debug("Reading the list of locales from %s" % uri)
            locales_data = self.read_json_from_uri(uri)
            for locale in locales_data["results"]:
                languages[locale["code"]] = {
                    "language": locale["name"],
                    "coordinators": [],
                    "reviewers": [],
                    "translators": [],
                }
            if locales_data["next"] is None:
                break
            else:
                uri = locales_data["next"]

        return languages


def save_to_yaml(data, output_file):
    with open(output_file, "w") as out:
        out.write(YAML_COMMENT)
        for k, v in data.items():
            yaml.safe_dump(
                {k: v},
                out,
                allow_unicode=True,
                indent=4,
                encoding="utf-8",
                default_flow_style=False,
            )


def collect_weblate_language_and_users(wc):
    weblate = WeblateUtility(wc)

    LOG.info("Retrieving language list")
    languages = weblate.get_locales()
    users = weblate.get_users()["results"]

    for language in languages.keys():
        LOG.info("Getting user list from language %s" % language)

        for user in users:
            languages[language]["translators"].append(user["username"])
            # languages[language]["reviewers"].append(user["username"])
            # languages[language]["coordinators"].append(user["username"])

        # Sort each user list alphabetically
        for role in ["translators", "reviewers", "coordinators"]:
            languages[language][role].sort()

    result = OrderedDict((k, languages[k]) for k in sorted(languages))
    return result


if __name__ == "__main__":
    # Loads weblate.ini configuration file
    try:
        wc = IniConfig(os.path.expanduser('~/.config/weblate.ini'))
    except ValueError as e:
        sys.exit(e)

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-o",
        "--output-file",
        default="translation_team.yaml",
        help="Specify the output file. " "Default: translation_team.yaml",
    )
    options = parser.parse_args()

    output_file = options.output_file
    data = collect_weblate_language_and_users(wc)
    save_to_yaml(data, output_file)
    print("output is saved to filename: %s" % output_file)
